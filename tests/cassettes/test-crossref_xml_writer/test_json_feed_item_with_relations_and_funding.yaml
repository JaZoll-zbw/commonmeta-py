interactions:
- request:
    body: ''
    headers:
      accept:
      - '*/*'
      accept-encoding:
      - gzip, deflate
      connection:
      - keep-alive
      host:
      - api.rogue-scholar.org
      user-agent:
      - python-httpx/0.25.2
    method: GET
    uri: https://api.rogue-scholar.org/posts/e58dc9c8-b870-4db2-8896-238b3246c551
  response:
    content: '{"abstract":null,"archive_url":"https://wayback.archive-it.org/22096/20231101172748/https://blog.front-matter.io/posts/tracking-the-growth-of-the-pid-graph","authors":[{"affiliation":[{"id":"https://ror.org/04wxnsj81","name":"DataCite"}],"name":"Martin
      Fenner","url":"https://orcid.org/0000-0003-1419-2405"}],"blog":{"archive_prefix":"https://wayback.archive-it.org/22096/20231101172748/","authors":[{"name":"Martin
      Fenner","url":"https://orcid.org/0000-0003-1419-2405"}],"canonical_url":null,"category":"computerAndInformationSciences","created_at":1672561153,"current_feed_url":"https://blog.front-matter.io/atom/","description":"The
      Front Matter Blog covers the intersection of science and technology since 2007.","favicon":"https://blog.front-matter.io/favicon.png","feed_format":"application/atom+xml","feed_url":"https://blog.front-matter.io/atom","filter":null,"funding":null,"generator":"Ghost","generator_raw":"Ghost
      5.52","home_page_url":"https://blog.front-matter.io","id":"74659bc5-e36e-4a27-901f-f0c8d5769cb8","indexed":null,"issn":"2749-9952","language":"en","license":"https://creativecommons.org/licenses/by/4.0/legalcode","mastodon":"https://mozilla.social/@martin","plan":"Personal","prefix":"10.53731","relative_url":null,"ror":null,"secure":true,"slug":"front_matter","status":"active","title":"Front
      Matter","updated_at":1708949311,"use_api":true,"use_mastodon":true,"user_id":"8498eaf6-8c58-4b58-bc15-27eda292b1aa"},"blog_name":"Front
      Matter","blog_slug":"front_matter","content_text":"The connections between scholarly
      resources generated by persistent\nidentifiers (PIDs) and associated metadata
      form a graph: the PID Graph\n\\[Fenner & Aryani\n([2019](https://blog.datacite.org/tracking-the-growth-of-the-pid-graph/#ref-https://doi.org/10.5438/jwvf-8a66))\\].\nWe
      developed this PID Graph concept in the EC-funded [FREYA\nproject](https://www.project-freya.eu/en),
      and have identified important\nuse cases and technical requirements. In May,
      DataCite introduced a\nGraphQL API to standardize and simplify how users can
      contribute to and\nconsume the PID Graph \\[Fenner\n([2019b](https://blog.datacite.org/tracking-the-growth-of-the-pid-graph/#ref-https://doi.org/10.5438/qab1-n315))\\].\nToday
      we are announcing another important milestone: we added the\nrequired functionality
      to the DataCite GraphQL API that allows us to\nkeep track of the growth of the
      PID Graph in terms of nodes (resources)\nand edges (connections). As before,
      we are using a Jupyter notebook to\nanalyze and visualize the data.\n\nThe graph
      visualizes the main resources currently available via the\nDataCite GraphQL
      API, and their connections. The required data are\nfetched via a single GraphQL
      API call:\n\n    {\n      publications {\n        totalCount\n        publicationConnectionCount\n        datasetConnectionCount\n        softwareConnectionCount\n        researcherConnectionCount\n        funderConnectionCount\n      }\n      datasets
      {\n        totalCount\n        datasetConnectionCount\n        softwareConnectionCount\n        researcherConnectionCount\n        funderConnectionCount\n      }\n      softwares
      {\n        totalCount\n        softwareConnectionCount\n        researcherConnectionCount\n        funderConnectionCount\n      }\n      researchers
      {\n        totalCount\n      }\n      funders {\n        totalCount\n      }\n    }\n\nThe
      numbers reflect what is currently available via the DataCite GraphQL\nAPI, not
      the total number of publications, datasets, etc. with\npersistent identifiers
      and linking metadata. This includes all\npublications, datasets and software
      with DataCite DOIs, all funders in\nthe [Crossref Open Funder\nRegistry](https://support.crossref.org/hc/en-us/articles/214360886-The-Open-Funder-Registry),\npublications
      with Crossref DOIs linked to at least one DataCite DOI, and\nall researchers
      with an ORCID identifier linked to at least one DataCite\nDOI. A lot of work
      remains to be done to include the other resources\nwith persistent identifiers
      made available by FREYA partners, including\nCrossref, ORCID and EMBL-EBI, as
      well as their connections. With this\nnew API functionality we can now track
      the growth of the PID Graph with\nthe key performance indicators (KPIs) number
      of **nodes** and number of\n**connections**.\n\nA few interesting observations
      can be made from the visualization: not\nsurprisingly, given that datasets currently
      make up the largest number\nof resources in the PID Graph, by far the largest
      number of connections\n(9.4 million) is between datasets and other datasets.
      Looking at the\nrelation type of these connections in the Event Data API, most
      of them\n(8.5 million) don\\''t describe versioning or granularity\n(HasPart/IsPartOf
      relations), but use the relation type **references**\nbetween two [GBIF](https://www.gbif.org/en/)
      DOIs. This reflects the\nmain [use case for DOIs at\nGBIF](https://www.gbif.org/en/document/81771/gbif-overview-powerpoint-slides),\ntracking
      occurrences of species.\n\nThe graph shows 1.5 million connections between publications
      and\ndatasets, representing the data citations made available via the\n[Crossref/DataCite
      Event Data Scholix API\nendpoint](https://www.eventdata.crossref.org/guide/app-scholix/).\nTwenty-five
      percent of datasets with DataCite DOIs have been referenced\nin the scholarly
      literature, according to this graph. We also see the\nnumber of software citations
      using DataCite DOIs for software found in\nthe scholarly literature, and we
      can use this API call to keep track of\nthem. Similarly, we can track the number
      of datasets, publications, and\nsoftware linked to researchers (via their ORCID
      ID), and funding (via\nthe Crossref Funder ID), but keep in mind that connections
      to\nresearchers and funding via Crossref are still missing.\n\nThe Jupyter notebook
      used to generate the visualization shown here is\navailable via GitHub, where
      we store all PID Graph notebooks in a\n[central repository](https://github.com/datacite/notebooks).
      Starting\nwith this notebook \\[Fenner\n([2019a](https://blog.datacite.org/tracking-the-growth-of-the-pid-graph/#ref-https://doi.org/10.14454/3bpw-w381))\\]\nwe
      are also issuing DOIs for the notebooks, which we generate using a\n[codemeta](https://codemeta.github.io/)
      file hosted in the same folder\nas the notebook. This should make these notebooks
      easier to discover,\nand they also become part of the PID Graph.\n\nGoing forward
      we want to refine the GraphQL API to provide the numbers\nof **nodes** and **connections**
      as they change over time, making it\neasier to track progress. And of course,
      we will be adding more resource\ntypes and information from other FREYA partners.
      Keep an eye on this\nblog for further updates!\n\n## Acknowledgments\n\nThis
      blog post was [originally\npublished](https://doi.org/10.5438/bv9z-dc66) on
      the DataCite Blog. This\nwork was funded by the European Union''s Horizon 2020
      research and\ninnovation programme under [grant agreement\nNo.\u00a0777523](https://doi.org/10.3030/777523){rel=\"noreferrer\"}.\n\n##
      References\n\nFenner M. Jupyter Notebook FREYA PID Graph Key Performance Indicators\n(KPIs).
      Published online June 30, 2019.\ndoi:[10.14454/3BPW-W381](https://doi.org/10.14454/3BPW-W381)\n\nFenner
      M. The DataCite GraphQL API is now open for (pre-release)\nbusiness. Published
      online May 15, 2019.\ndoi:[10.53731/r79sa71-97aq74v-ag4vc](https://doi.org/10.53731/r79sa71-97aq74v-ag4vc)\n\nFenner
      M, Aryani A. Introducing the PID Graph. Published online 2019.\ndoi:[10.5438/JWVF-8A66](https://doi.org/10.5438/JWVF-8A66)\n","doi":"https://doi.org/10.53731/r79s4nh-97aq74v-ag4t1","guid":"62d42bbd41e317003df48ee9","id":"e58dc9c8-b870-4db2-8896-238b3246c551","image":"https://blog.front-matter.io/content/images/2022/08/download-19-.jpeg","indexed_at":1708333897,"language":"en","published_at":1561939200,"reference":[{"doi":"https://doi.org/10.14454/3bpw-w381","key":"ref1","publicationYear":"2019","title":"Jupyter
      Notebook FREYA PID Graph Key Performance Indicators (KPIs)"},{"doi":"https://doi.org/10.53731/r79sa71-97aq74v-ag4vc","key":"ref2","publicationYear":"2019","title":"The
      DataCite GraphQL API is now open for (pre-release) business"},{"doi":"https://doi.org/10.5438/jwvf-8a66","key":"ref3","publicationYear":"2019","title":"Introducing
      the PID Graph"}],"relationships":[{"type":"IsIdenticalTo","url":"https://doi.org/10.5438/bv9z-dc66"},{"type":"HasAward","url":"https://doi.org/10.3030/777523"}],"summary":"The
      connections between scholarly resources generated by persistent identifiers
      (PIDs) and associated metadata form a graph: the PID Graph [Fenner &amp; Aryani
      (2019)]. We developed this PID Graph concept in the EC-funded FREYA project,
      and have identified important use cases and technical requirements. In May,
      DataCite introduced a GraphQL API to standardize and simplify how users can
      contribute to and consume the PID Graph [Fenner (2019b)].","tags":["Feature"],"title":"Tracking
      the Growth of the PID Graph","updated_at":1694087432,"url":"https://blog.front-matter.io/posts/tracking-the-growth-of-the-pid-graph"}

      '
    headers:
      content-encoding:
      - gzip
      content-type:
      - application/json
      date:
      - Fri, 01 Mar 2024 11:26:47 GMT
      fly-request-id:
      - 01HQWW8K0Q10Y0XPKK4D53XW68-fra
      ratelimit-limit:
      - '15'
      ratelimit-remaining:
      - '10'
      ratelimit-reset:
      - '18'
      server:
      - Fly/38ec6ca9 (2024-02-29)
      transfer-encoding:
      - chunked
      vary:
      - Origin
      via:
      - 1.1 fly.io
    http_version: HTTP/1.1
    status_code: 200
version: 1
